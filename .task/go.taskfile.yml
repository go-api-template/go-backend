# Use Task to define tasks and run them locally or in CI
# For more information about Task, see https://taskfile.dev/#/usage?id=usage
version: '3'

tasks:

    default:
        desc: "Run the default go tasks"
        cmds:
            - task: clean
            - task: generate
            - task: swag
            - task: fmt
            - task: vet
            - task: lint
            - task: test
            - task: gosec
            - task: build

    tidy:
        desc: "Tidy the go code"
        cmds:
            - echo "Tidying..."
            - go mod tidy
        silent: true

    generate:
        desc: "Generate the go code"
        cmds:
            - echo "Generating..."
            - go generate ./...
        silent: true

    swag:
        desc: "Generate swagger docs"
        cmds:
            - echo "Generating swagger docs..."
            - swag fmt
            - swag init --parseDependency --parseInternal
        silent: true

    fmt:
        desc: "Format the go code"
        cmds:
            - echo "Formatting..."
            - go fmt ./...
        silent: true

    vet:
        desc: "Vet the go code"
        cmds:
            - echo "Vetting..."
            - go vet ./...
        silent: true

    lint:
        desc: "Lint the go code"
        cmds:
            - echo "Linting..."
            - golangci-lint run ./...
        silent: true

    test:
        desc: "Test the go code"
        cmds:
            - echo "Testing..."
            - go test ./...
        silent: true

    test-coverage:
        desc: "Test the go code with coverage"
        cmds:
            - echo "Generating test coverage..."
            - go test -v ./... -covermode=atomic -coverpkg=./... -coverprofile coverage.out
            - go tool cover -html coverage.out -o coverage.html
        silent: true

    gosec:
        desc: "Run gosec on the go code"
        cmds:
            - echo "Running gosec..."
            - gosec ./...
        silent: true

    build:
        desc: "Build the go binary"
        cmds:
            - echo "Building..."
            - mkdir -p {{.BUILD_FOLDER}}
            - cp -rf templates -t {{.BUILD_FOLDER}}
            - cp -rf assets -t {{.BUILD_FOLDER}}
            - go build -v -trimpath -ldflags "-w -s -X modules.config.version={{.VERSION}} -X modules.config.buildDate={{.BUILD_DATE}}" -o {{.BUILD_FOLDER}}/{{.PROJECT_NAME}}{{exeExt}}
        silent: true

    release:
        desc: "Build the go binary for release"
        cmds:
            - echo "Building release..."
            - env GOOS=darwin GOARCH=amd64 go build -v -trimpath -ldflags "-w -s -X modules.config.version={{.VERSION}} -X modules.config.buildDate={{.BUILD_DATE}}" -o {{.RELEASE_FOLDER}}/{{.PROJECT_NAME}}; cd {{.RELEASE_FOLDER}}; tar czf {{.PROJECT_NAME}}_darwin_amd64.tar.gz {{.PROJECT_NAME}}; rm -f {{.PROJECT_NAME}}
            - env GOOS=linux GOARCH=amd64 go build -v -trimpath -ldflags "-w -s -X modules.config.version={{.VERSION}} -X modules.config.buildDate={{.BUILD_DATE}}" -o {{.RELEASE_FOLDER}}/{{.PROJECT_NAME}}; cd {{.RELEASE_FOLDER}}; tar czf {{.PROJECT_NAME}}_linux_amd64.tar.gz {{.PROJECT_NAME}}; rm -f {{.PROJECT_NAME}}
            - env GOOS=windows GOARCH=amd64 go build -v -trimpath -ldflags "-w -s -X modules.config.version={{.VERSION}} -X modules.config.buildDate={{.BUILD_DATE}}" -o {{.RELEASE_FOLDER}}/{{.PROJECT_NAME}}{{exeExt}}; cd {{.RELEASE_FOLDER}}; tar czf {{.PROJECT_NAME}}_windows_amd64.tar.gz {{.PROJECT_NAME}}{{exeExt}}; rm -f {{.PROJECT_NAME}}{{exeExt}}
        silent: true

    clean:
        desc: "Clean the go binary"
        cmds:
            - echo "Cleaning..."
            - rm -rf {{.BUILD_FOLDER}}
            - rm -rf {{.RELEASE_FOLDER}}
            - rm -f coverage.*
        silent: true

    update:
        desc: "Update the go dependencies"
        cmds:
            - echo "Updating dependencies..."
            - go get -u ./...
        silent: true

    run:
        desc: "Run the go binary"
        cmds:
            - echo "Running..."
            - go run main.go
        silent: true
