definitions:
  httputil.Error:
    properties:
      code:
        example: 404
        type: integer
      data: {}
      message:
        example: not found
        type: string
    type: object
  httputil.Message:
    properties:
      code:
        example: 200
        type: integer
      data: {}
      message:
        example: a server message
        type: string
    type: object
  models.AccessToken:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      token_type:
        type: string
    type: object
  models.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
  models.User:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        description: User information
        type: string
      last_name:
        type: string
      name:
        type: string
      reset_token:
        description: Password reset
        type: string
      role:
        $ref: '#/definitions/models.Role'
      verification_token:
        type: string
    type: object
  models.UserPasswordConfirmation:
    properties:
      password:
        minLength: 8
        type: string
      password_confirm:
        type: string
    required:
    - password
    - password_confirm
    type: object
  models.UserSignIn:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.UserSignUp:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 8
        type: string
      password_confirm:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - password_confirm
    type: object
info:
  contact: {}
paths:
  /auth/change-password:
    post:
      consumes:
      - application/json
      description: Change the user password
      parameters:
      - description: New password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.UserPasswordConfirmation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.Error'
        "412":
          description: Precondition Failed
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Change the user password
      tags:
      - auth
  /auth/forgot-password/{email}:
    post:
      consumes:
      - application/json
      description: Send a reset token by email
      parameters:
      - description: User email
        format: email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/httputil.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Send a reset token by email
      tags:
      - auth
  /auth/refresh:
    get:
      consumes:
      - application/json
      description: Refresh the access token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AccessToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Refresh the access token
      tags:
      - auth
  /auth/reset-password/{token}:
    patch:
      consumes:
      - application/json
      description: Reset the user password
      parameters:
      - description: New password
        in: body
        name: password
        required: true
        schema:
          $ref: '#/definitions/models.UserPasswordConfirmation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.Error'
        "412":
          description: Precondition Failed
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Reset the user password
      tags:
      - auth
  /auth/signin:
    post:
      consumes:
      - application/json
      description: Sign in a user
      parameters:
      - description: User credential
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.UserSignIn'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.AccessToken'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Sign in a user
      tags:
      - auth
  /auth/signout:
    get:
      consumes:
      - application/json
      description: Sign out current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.Message'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Sign out current user
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User sign up
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserSignUp'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/httputil.Error'
        "412":
          description: Precondition Failed
          schema:
            $ref: '#/definitions/httputil.Error'
        "502":
          description: Bad Gateway
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Create a new user
      tags:
      - auth
  /auth/verify/{token}:
    get:
      consumes:
      - application/json
      description: Verify email address from verification code sent by email
      parameters:
      - description: verification code sent by email
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputil.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Verify email address
      tags:
      - auth
  /auth/welcome/{email}:
    post:
      consumes:
      - application/json
      description: This re-sends the welcome email to the user if the user is not
        verified
      parameters:
      - description: User email
        format: email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputil.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Send welcome email
      tags:
      - auth
  /user/me:
    delete:
      consumes:
      - application/json
      description: Delete the connected user
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/httputil.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Delete the connected user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Update information about the connected user
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/httputil.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Update information about the connected user
      tags:
      - user
  /users:
    get:
      consumes:
      - application/json
      description: Find all users
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort by field
        in: query
        name: sort
        type: string
      - description: Sort order (asc or desc)
        in: query
        name: order
        type: string
      - description: Search string
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Find all users
      tags:
      - user
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/httputil.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Delete a user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Find a user by id
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Find a user by id
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputil.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Update a user
      tags:
      - user
  /users/me:
    get:
      consumes:
      - application/json
      description: Get the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputil.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputil.Error'
      summary: Get the current user
      tags:
      - user
swagger: "2.0"
